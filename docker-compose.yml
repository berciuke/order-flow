version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-production}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - VITE_API_URL=http://backend-api:${PORT_BACKEND_API:-8000}
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/vite.config.ts:/app/vite.config.ts:ro
      - ./frontend/tailwind.config.js:/app/tailwind.config.js:ro
      - ./frontend/postcss.config.js:/app/postcss.config.js:ro
    depends_on:
      backend-api:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
      args:
        - NODE_ENV=${NODE_ENV:-production}
        - PORT=${PORT_BACKEND_API:-8000}
    ports:
      - "${PORT_BACKEND_API:-8000}:${PORT_BACKEND_API:-8000}"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT_BACKEND_API:-8000}
      - DATABASE_URL=postgresql://orderflow_user:${POSTGRES_PASSWORD:-orderflow_password}@postgres:5432/orderflow_db
      - RABBITMQ_URL=amqp://orderflow_user:${RABBITMQ_PASSWORD:-orderflow_password}@rabbitmq:5672/
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-orderflow_redis_password}@redis:6379
    volumes:
      - ./backend-api/src:/app/src:rw
      - ./backend-api/package.json:/app/package.json:rw
      - ./backend-api/package-lock.json:/app/package-lock.json:rw
      - ./backend-api/tsconfig.json:/app/tsconfig.json:rw
      - ./backend-api/nodemon.json:/app/nodemon.json:rw
      - ./backend-api/prisma:/app/prisma:rw
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
      target: ${PYTHON_ENV:-production}
      args:
        - PYTHON_ENV=${PYTHON_ENV:-production}
    ports:
      - "${PORT_ORDER_SERVICE:-8001}:${PORT_ORDER_SERVICE:-8001}"
    environment:
      - PYTHON_ENV=${PYTHON_ENV:-production}
      - PORT=${PORT_ORDER_SERVICE:-8001}
      - DATABASE_URL=postgresql://orderflow_user:${POSTGRES_PASSWORD:-orderflow_password}@postgres:5432/orderflow_db
      - RABBITMQ_URL=amqp://orderflow_user:${RABBITMQ_PASSWORD:-orderflow_password}@rabbitmq:5672/
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./order-service/app:/app/app:rw
      - ./order-service/requirements.txt:/app/requirements.txt:rw
      - ./order-service/alembic.ini:/app/alembic.ini:rw
      - ./order-service/alembic:/app/alembic:rw
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: orderflow_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-orderflow_password}
      POSTGRES_DB: orderflow_db
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderflow_user -d orderflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: orderflow_user
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-orderflow_password}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./scripts/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-orderflow_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-orderflow_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:

networks:
  app-network:
    driver: bridge 